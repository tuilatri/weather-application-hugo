[
{
	"uri": "http://localhost:1313/vi/",
	"title": "Dự án Ứng dụng Thời tiết",
	"tags": [],
	"description": "",
	"content": "Xây dựng Ứng dụng Thời tiết Tương tác Tổng quan Trong workshop này, bạn sẽ được hướng dẫn từng bước để xây dựng một ứng dụng thời tiết hoàn chỉnh và có tính tương tác cao. Dự án sử dụng JavaScript cho phần frontend để xử lý giao diện và tương tác người dùng, cùng với một backend đơn giản bằng Node.js (Express) để giao tiếp an toàn với API thời tiết bên ngoài.\nNội dung Giới thiệu và Tổng quan kiến trúc Các bước chuẩn bị môi trường Xây dựng Backend với Node.js và Express Xây dựng Frontend - Giao diện và Hiển thị cơ bản Triển khai các tính năng chính Hoàn thiện giao diện và hiệu ứng Tổng kết và Mở rộng Chức năng chính của dự án ℹ️ Ứng dụng này không chỉ hiển thị thông tin thời tiết cơ bản mà còn tích hợp nhiều tính năng nâng cao để mang lại trải nghiệm tốt nhất cho người dùng.\n💡 Các tính năng nổi bật:\nHiển thị thời tiết chi tiết: Cung cấp thông tin thời tiết hiện tại và dự báo cho 7 ngày tới. Tìm kiếm thông minh: Tự động gợi ý các địa điểm khi người dùng nhập. Định vị tự động: Tự động lấy dữ liệu thời tiết dựa trên vị trí hiện tại của người dùng. Đa ngôn ngữ: Hỗ trợ hơn 40 ngôn ngữ khác nhau, cho phép người dùng tùy chọn ngôn ngữ hiển thị. Lưu địa điểm yêu thích: Sử dụng localStorage để lưu lại các địa điểm người dùng quan tâm. Chuyển đổi đơn vị: Dễ dàng chuyển đổi nhiệt độ giữa độ C (°C) và độ F (°F). Chỉ số nâng cao: Hiển thị các chỉ số quan trọng như Chất lượng không khí (AQI), chỉ số UV, và khả năng mưa. Giao diện động: Thay đổi hình nền ngẫu nhiên và áp dụng các hiệu ứng chuyển động mượt mà. Kiến trúc và Phạm vi ℹ️ Dự án được chia thành hai phần chính: Frontend (phía người dùng) và Backend (phía máy chủ), giao tiếp với nhau qua API.\nFrontend (Client-side)\nChịu trách nhiệm hiển thị toàn bộ giao diện người dùng và xử lý các tương tác. main.js: Tập tin trung tâm, quản lý luồng chính và các sự kiện (tìm kiếm, chọn ngôn ngữ, lưu địa điểm). ui.js: Quản lý việc cập nhật và hiển thị dữ liệu lên DOM (Document Object Model), bao gồm cả hiệu ứng loading skeleton. api.js: Gửi yêu cầu fetch đến backend để lấy dữ liệu thời tiết và gợi ý tìm kiếm. lang.js: Chứa dữ liệu dịch thuật và logic để cập nhật văn bản tĩnh theo ngôn ngữ được chọn. favorites.js: Cung cấp các hàm để quản lý danh sách địa điểm yêu thích trong localStorage. clock.js: Logic cho cả đồng hồ kim và đồng hồ số hiển thị trên giao diện. animations.js: Chứa các hàm tạo hiệu ứng (ví dụ: hiệu ứng đếm số cho nhiệt độ). 🔒 Backend (Server-side)\nĐóng vai trò là một lớp trung gian (proxy) an toàn giữa frontend và WeatherAPI. server.js: Xây dựng bằng Node.js và Express, tạo ra các endpoint để frontend có thể gọi. /weather: Nhận yêu cầu từ frontend, sau đó gọi đến WeatherAPI với API key được bảo mật trên server để lấy dữ liệu thời tiết. /search: Nhận yêu cầu tìm kiếm, gọi đến WeatherAPI để lấy danh sách gợi ý. 💡 Hãy cùng bắt đầu xây dựng dự án thú vị này trong các phần tiếp theo!\n"
},
{
	"uri": "http://localhost:1313/vi/3-accessibilitytoinstances/3.1-public-instance/",
	"title": "Kết nối đến máy chủ",
	"tags": [],
	"description": "",
	"content": "Hướng dẫn chi tiết các lệnh trên MobaXterm Trong phần này, bạn sẽ thực hiện các lệnh để kết nối từ máy tính cá nhân vào Bastion Host, sau đó từ Bastion Host kết nối vào máy chủ Backend để cài đặt và chạy ứng dụng.\nLưu ý: Các lệnh được thực hiện tuần tự. Hãy đảm bảo bạn đã kết nối thành công ở bước trước rồi mới tiếp tục bước sau.\n1. Kết nối vào Bastion Host Đây là bước đầu tiên, kết nối từ máy tính của bạn vào máy chủ Bastion Host trong Public Subnet.\nMở MobaXterm và tạo một phiên SSH mới. Remote host: Nhập địa chỉ Public IPv4 của project-bastion-host-ec2. Specify username: ec2-user. Use private key: Chọn file project-keypair.pem bạn đã tải về khi tạo EC2. Thiết lập phiên SSH trong MobaXterm 2. Chuyển tiếp (Jump) vào Backend Instance Bây giờ, khi đã ở trong Bastion Host, chúng ta cần chuẩn bị để kết nối tới máy chủ Backend.\nBước 1: Tạo lại file key pair trên Bastion Host. Mở một trình soạn thảo văn bản như nano và dán nội dung của file .pem từ máy tính của bạn vào.\nnano project-keypair.pem Dán nội dung key vào nano Bước 2: Phân quyền chính xác cho file key. SSH yêu cầu file key phải được bảo mật, nếu không sẽ từ chối kết nối.\nchmod 400 project-keypair.pem Phân quyền cho file key Bước 3: Thực hiện kết nối SSH đến Backend. Sử dụng địa chỉ Private IPv4 của project-backend-ec2.\nssh -i project-keypair.pem ec2-user@\u0026lt;Private_IP_của_EC2_Backend\u0026gt; Kết nối thành công vào máy chủ Backend 3. Cài đặt môi trường và ứng dụng trên Backend Khi đã ở trong máy chủ Backend, hãy cài đặt các công cụ cần thiết.\nCập nhật hệ thống:\nsudo yum update -y Cập nhật các gói hệ thống Cài đặt Git:\nsudo yum install -y git Cài đặt Git Sao chép mã nguồn dự án từ GitHub:\ngit clone https://github.com/tuilatri/weather-application.git Sao chép dự án Di chuyển vào thư mục backend:\ncd weather-application/backend Di chuyển vào thư mục backend Cài đặt Node.js:\nsudo dnf install -y nodejs Cài đặt Node.js Cài đặt các thư viện phụ thuộc của dự án:\nnpm install Cài đặt các gói npm Cấu hình biến môi trường:\nnano .env Cấu hình file .env 4. Khởi chạy và kiểm tra Backend Khởi chạy ứng dụng:\nnpm run start Ứng dụng backend đang chạy Kiểm tra hoạt động của ứng dụng ngay trên máy chủ: Mở một cửa sổ terminal khác trên MobaXterm và kết nối lại, sau đó dùng lệnh curl để kiểm tra.\ncurl http://localhost:3000/ Kiểm tra backend bằng curl 5. Cập nhật Frontend với địa chỉ CloudFront của Backend Sau khi Backend đã hoạt động, bạn cần lấy đường dẫn CloudFront của Backend và cập nhật vào file cấu hình của Frontend trên S3.\nBước 1: Lấy đường dẫn CloudFront Distribution Domain Name của Backend. Truy cập dịch vụ CloudFront trong AWS Console, tìm và sao chép lại Domain Name của distribution trỏ đến backend.\nBước 2: Truy cập S3 bucket chứa mã nguồn Frontend. Vào dịch vụ S3, chọn bucket có chứa mã nguồn của frontend.\nBước 3: Mở và chỉnh sửa file api.js. Tìm đến file api.js (thường nằm trong thư mục js hoặc tương tự), chọn file và nhấn Edit.\nBước 4: Cập nhật địa chỉ API. Trong nội dung file, tìm đến dòng khai báo biến API và dán đường dẫn CloudFront của backend vào. Sau đó nhấn Save changes. code JavaScript // Thay đổi giá trị của biến này const API_URL = \u0026lsquo;https://your-cloudfront-backend-domain.cloudfront.net\u0026rsquo;; Dán đường dẫn CloudFront và lưu lại Bước 5: Chờ CloudFront của Frontend cập nhật. Sau khi bạn lưu file api.js, CloudFront phục vụ cho Frontend sẽ cần vài phút để xóa cache cũ và cập nhật phiên bản mới của file. Hãy chờ khoảng 5-10 phút trước khi kiểm tra lại trang web. Chờ đợi CloudFront cập nhật 6. Hướng dẫn xử lý sự cố (Troubleshooting) Nếu bạn cập nhật code trên GitHub nhưng thay đổi không xuất hiện trên web, hãy làm theo các bước sau trên máy chủ Backend:\nKéo code mới nhất về:\ngit pull origin main Tìm tiến trình Node.js đang chạy:\nps aux | grep node Dừng tiến trình cũ bằng PID của nó:\nkill -9 \u0026lt;PID\u0026gt; Ví dụ thực tế:\n[ec2-user@ip-10-0-144-101 backend]$ ps aux | grep node\rec2-user 3117 0.0 6.6 1127836 64896 pts/1 Sl+ 10:15 0:00 node server.js\r[ec2-user@ip-10-0-144-101 backend]$ kill -9 3117 Khởi động lại ứng dụng:\nnpm run start "
},
{
	"uri": "http://localhost:1313/vi/2-prerequiste/2.1-createvpc/",
	"title": "Tạo VPC",
	"tags": [],
	"description": "",
	"content": "Tạo Amazon Virtual Private Cloud (VPC) ℹ️ Mục tiêu\nTạo một môi trường mạng ảo (VPC) riêng biệt trong AWS cho dự án. Thiết lập các thành phần mạng cần thiết một cách tự động, bao gồm Subnet, Internet Gateway, NAT Gateway và Route Tables. 🔒 Các bước thực hiện\n1. Truy cập dịch vụ VPC Từ giao diện AWS Management Console, tìm kiếm dịch vụ VPC. Chọn VPC từ kết quả tìm kiếm để truy cập vào trang quản lý VPC. Giao diện quản lý VPC 2. Bắt đầu tạo VPC Trong giao diện VPC Dashboard, nhấn vào nút Create VPC. Nhấn nút Create VPC 3. Cấu hình thông số VPC Tại trang Create VPC, trong phần Resources to create, chọn VPC and more để sử dụng trình hướng dẫn tạo tự động.\nCấu hình chi tiết:\nName tag auto-generation: project-vpc IPv4 CIDR block: Để mặc định 10.0.0.0/16. Number of Availability Zones (AZs): 2 Number of Public subnets: 2 Number of Private subnets: 2 NAT gateways: 1 per AZ (Hoặc chọn In 1 AZ nếu bạn muốn tiết kiệm chi phí) VPC endpoints: None Cấu hình VPC and more Lưu ý: Việc tạo NAT Gateway sẽ phát sinh chi phí. Hãy xóa tài nguyên sau khi hoàn thành workshop để tránh phát sinh chi phí không mong muốn.\n4. Xác nhận và tạo VPC Sau khi đã điền đầy đủ thông tin, nhấn vào Create VPC ở góc dưới cùng bên phải để bắt đầu quá trình tạo. Hoàn tất và tạo VPC 5. Kiểm tra trạng thái VPC Quá trình tạo các tài nguyên có thể mất vài phút. Sau khi hoàn tất, bạn sẽ thấy màn hình thông báo thành công. Nhấn vào View VPC để xem lại các tài nguyên đã được tạo. Thông báo tạo VPC thành công Bạn sẽ được chuyển đến trang danh sách các VPC, nơi VPC project-vpc vừa tạo đã ở trạng thái Available. Kiểm tra VPC trong danh sách "
},
{
	"uri": "http://localhost:1313/vi/1-introduce/",
	"title": "Giới thiệu và Tổng quan kiến trúc",
	"tags": [],
	"description": "",
	"content": "Tổng quan kiến trúc Trong workshop này, chúng ta sẽ triển khai một ứng dụng dự báo thời tiết hoàn chỉnh lên môi trường AWS. Kiến trúc được thiết kế để đảm bảo tính sẵn sàng cao (High Availability), khả năng mở rộng (Scalability), và bảo mật (Security) bằng cách sử dụng các dịch vụ cốt lõi của AWS.\nDưới đây là sơ đồ kiến trúc tổng quan của dự án mà chúng ta sẽ xây dựng:\nCác dịch vụ AWS được sử dụng Dưới đây là danh sách các dịch vụ chính và vai trò của chúng trong dự án này:\nMạng và Bảo mật Amazon VPC (Virtual Private Cloud): Là nền tảng mạng cho toàn bộ dự án. Chúng ta sử dụng VPC để tạo ra một môi trường mạng riêng biệt và cô lập trên AWS, cho phép chúng ta kiểm soát hoàn toàn các tài nguyên mạng, bao gồm dải địa chỉ IP, subnets, và route tables.\nPublic \u0026amp; Private Subnets:\nPublic Subnets: Được sử dụng cho các tài nguyên cần truy cập trực tiếp từ Internet như Application Load Balancer và Bastion Host. Private Subnets: Dùng để chứa các tài nguyên nhạy cảm như máy chủ backend EC2, không cho phép truy cập trực tiếp từ Internet để tăng cường bảo mật. Security Groups: Hoạt động như một tường lửa ảo cho các máy chủ EC2 để kiểm soát lưu lượng truy cập vào và ra. Trong dự án, chúng ta cấu hình các Security Group riêng biệt cho Bastion Host, máy chủ Backend, và Application Load Balancer để chỉ cho phép các kết nối cần thiết.\nTính toán và Mở rộng Amazon EC2 (Elastic Compute Cloud): Cung cấp các máy chủ ảo để chạy ứng dụng.\nBackend Instances: Các máy chủ EC2 nằm trong private subnet, chịu trách nhiệm chạy ứng dụng Node.js để xử lý logic và giao tiếp với API thời tiết. Bastion Host: Một máy chủ EC2 đặt trong public subnet, đóng vai trò là một cổng truy cập an toàn để các quản trị viên có thể SSH vào và quản lý các máy chủ backend trong private subnet. Application Load Balancer (ALB): Tự động phân phối lưu lượng truy cập từ người dùng đến nhiều máy chủ backend EC2. ALB giúp tăng tính sẵn sàng và khả năng chịu lỗi của ứng dụng. Nó cũng thực hiện kiểm tra sức khỏe (health checks) để đảm bảo chỉ gửi request đến các máy chủ đang hoạt động tốt.\nAuto Scaling Group (ASG): Tự động điều chỉnh số lượng máy chủ EC2 backend dựa trên tải thực tế. Khi lưu lượng truy cập tăng, ASG sẽ tự động thêm máy chủ mới và sẽ loại bỏ chúng khi lưu lượng giảm, giúp tối ưu chi phí và đảm bảo hiệu năng.\nLưu trữ và Phân phối nội dung Amazon S3 (Simple Storage Service): Là dịch vụ lưu trữ đối tượng có khả năng mở rộng cao. Chúng ta sử dụng S3 để lưu trữ toàn bộ mã nguồn frontend (HTML, CSS, JavaScript) và cấu hình nó để hoạt động như một trang web tĩnh.\nAmazon CloudFront: Là một dịch vụ mạng phân phối nội dung (CDN) giúp tăng tốc độ tải trang web và API cho người dùng trên toàn cầu.\nFrontend Distribution: Phân phối nội dung tĩnh từ S3, cache tại các điểm biên (Edge Locations) gần người dùng nhất, đồng thời bảo mật S3 bucket bằng Origin Access Identity (OAI). Backend Distribution: Cung cấp một endpoint HTTPS an toàn cho API, chuyển tiếp các yêu cầu đến Application Load Balancer. "
},
{
	"uri": "http://localhost:1313/vi/2-prerequiste/",
	"title": "Các bước chuẩn bị",
	"tags": [],
	"description": "",
	"content": "Trang này cung cấp tổng quan về các bước cần thiết để triển khai dự án ứng dụng thời tiết lên môi trường AWS. Mỗi phần trong danh sách dưới đây sẽ dẫn bạn đến một trang hướng dẫn chi tiết.\nHãy tuần tự thực hiện các bước để đảm bảo hạ tầng được thiết lập một cách chính xác.\nNội dung chính của workshop Cấu hình Môi trường Mạng (VPC)\nTạo VPC Chỉnh sửa Public Subnet Thiết lập các Lớp Bảo mật (Security Group)\nTạo Security Group cho các thành phần Khởi tạo Máy chủ Ảo (EC2)\nTạo EC2 Instance cho Bastion Host và Backend Chuẩn bị cho việc Mở rộng (AMI \u0026amp; Launch Template)\nTạo Amazon Machine Image (AMI) Tạo Launch Template cho Auto Scaling Thiết lập Cân bằng tải (Load Balancer \u0026amp; Target Group)\nTạo Target Group Tạo Application Load Balancer (ALB) Cấu hình Tự động Mở rộng (Auto Scaling Group)\nTạo Auto Scaling Group Lưu trữ Frontend trên S3\nTạo S3 Bucket và cấu hình Static Website Hosting Tăng tốc và Phân phối Nội dung (CloudFront)\nTạo CloudFront cho Backend (ALB) Tạo CloudFront cho Frontend (S3) "
},
{
	"uri": "http://localhost:1313/vi/2-prerequiste/2.2-modifysubnet/",
	"title": "Chỉnh sửa Subnet",
	"tags": [],
	"description": "",
	"content": "Cấu hình Auto-assign Public IP cho Public Subnet ℹ️ Mục tiêu\nKích hoạt tính năng tự động gán địa chỉ IP công cộng (Public IP) cho các tài nguyên (như EC2 instance) được khởi chạy trong các Public Subnet. Điều này là cần thiết để có thể truy cập vào Bastion Host từ Internet. 🔒 Các bước thực hiện\n1. Truy cập trang quản lý Subnet Từ giao diện VPC Dashboard, chọn Subnets ở menu bên trái để xem danh sách các subnet đã được tạo. Danh sách các Subnet 2. Cấu hình cho Public Subnet đầu tiên Xác định và chọn một trong hai Public Subnet đã tạo (ví dụ: project-vpc-public-subnet-ap-southeast-1a). Nhấn vào nút Actions và chọn Edit subnet settings. Chọn Edit subnet settings 3. Kích hoạt tính năng Auto-assign IP Trong trang Edit subnet settings, tìm đến mục Auto-assign IP settings. Tích vào ô Enable auto-assign public IPv4 address. Cuộn xuống dưới và nhấn Save để lưu lại thay đổi. Kích hoạt tính năng Auto-assign Public IP 4. Lặp lại cho Public Subnet còn lại Thực hiện lại các bước 2 và 3 cho Public Subnet thứ hai (ví dụ: project-vpc-public-subnet-ap-southeast-1b) để đảm bảo các instance trong cả hai Availability Zone đều có thể nhận được IP công cộng khi cần thiết. Hoàn tất cấu hình cho cả hai Public Subnet "
},
{
	"uri": "http://localhost:1313/vi/3-accessibilitytoinstances/",
	"title": "Tạo kết nối đến máy chủ EC2",
	"tags": [],
	"description": "",
	"content": "Sau khi đã xây dựng xong toàn bộ hạ tầng trên AWS, bước tiếp theo là kết nối vào các máy chủ ảo (EC2 instance) để triển khai mã nguồn ứng dụng backend.\nDo kiến trúc của chúng ta có Public và Private Subnet, chúng ta không thể kết nối trực tiếp vào máy chủ Backend từ Internet. Thay vào đó, chúng ta sẽ thực hiện quy trình kết nối an toàn:\nKết nối từ máy tính cá nhân vào Bastion Host (đang nằm trong Public Subnet). Từ Bastion Host, tiếp tục kết nối vào Backend Instance (đang nằm trong Private Subnet). Trong chương này, MobaXterm sẽ là công cụ SSH client trên Windows để thực hiện các kết nối. Bạn cũng có thể sử dụng các công cụ khác như Terminal (macOS/Linux), PuTTY, hoặc Windows Terminal.\n"
},
{
	"uri": "http://localhost:1313/vi/2-prerequiste/2.3-createsg/",
	"title": "Tạo Security Group cho các thành phần",
	"tags": [],
	"description": "",
	"content": "Tạo Security Group trong Amazon VPC ℹ️ Mục tiêu\nSecurity Group hoạt động như một bức tường lửa ảo ở cấp độ instance để kiểm soát lưu lượng truy cập ra vào. Trong phần này, chúng ta sẽ tạo ra 3 Security Group riêng biệt cho từng thành phần trong kiến trúc: Bastion Host: Cho phép truy cập SSH an toàn từ bên ngoài. Backend: Nhận lưu lượng từ Load Balancer và cho phép quản trị từ Bastion Host. Application Load Balancer (ALB): Nhận lưu lượng truy cập công khai từ người dùng. 🔒 Các bước thực hiện\n1. Tạo Security Group cho Bastion Host (project-bastion-host-sg) Đây là lớp bảo vệ cho máy chủ Bastion Host, cho phép chúng ta kết nối vào từ Internet một cách an toàn.\nBước 1: Bắt đầu tạo Security Group\nTừ giao diện VPC Dashboard, chọn Security Groups ở menu bên trái. Nhấn vào Create security group. Tạo Security Group mới Bước 2: Cấu hình thông tin cơ bản\nSecurity group name: project-bastion-host-sg Description: Cho phep truy cap vao Bastion Host VPC: Chọn VPC project-vpc đã tạo ở bước trước. Thông tin cơ bản của Bastion Host SG Bước 3: Thiết lập Inbound Rules (Luồng truy cập vào)\nNhấn Add rule và cấu hình các quy tắc sau: Type Protocol Port range Source Description SSH TCP 22 My IP Cho phép bạn kết nối SSH từ IP hiện tại. HTTP TCP 80 Anywhere-IPv4 Cho phép truy cập HTTP từ mọi nơi. HTTPS TCP 443 Anywhere-IPv4 Cho phép truy cập HTTPS từ mọi nơi. All ICMP-IPv4 All All Anywhere-IPv4 Cho phép ping để kiểm tra kết nối. Cấu hình Inbound Rules cho Bastion Host SG Bước 4: Cuộn xuống và nhấn Create security group. 2. Tạo Security Group cho Backend (project-backend-sg) Lớp bảo vệ này chỉ cho phép truy cập từ Application Load Balancer và Bastion Host, đảm bảo các máy chủ backend không bị truy cập trực tiếp từ Internet.\nBước 1: Cấu hình thông tin cơ bản\nNhấn Create security group một lần nữa. Security group name: project-backend-sg Description: Cho phep truy cap tu ALB va Bastion Host VPC: Chọn VPC project-vpc. Thông tin cơ bản của Backend SG Bước 2: Thiết lập Inbound Rules\nNhấn Add rule và cấu hình các quy tắc sau: Type Protocol Port range Source Description Custom TCP TCP 3000 Custom -\u0026gt; project-alb-sg Cho phép ALB gửi traffic đến ứng dụng backend. SSH TCP 22 Custom -\u0026gt; project-bastion-host-sg Cho phép kết nối SSH từ Bastion Host để quản trị. All ICMP-IPv4 All All Anywhere-IPv4 Cho phép ping để kiểm tra kết nối. Khi chọn Source, bạn gõ sg- vào ô tìm kiếm, AWS sẽ hiển thị danh sách các Security Group có sẵn để bạn chọn.\nCấu hình Inbound Rules cho Backend SG Bước 3: Nhấn Create security group. 3. Tạo Security Group cho Application Load Balancer (project-alb-sg) Lớp bảo vệ này cho phép người dùng từ Internet có thể truy cập vào ứng dụng của chúng ta thông qua ALB.\nBước 1: Cấu hình thông tin cơ bản\nNhấn Create security group. Security group name: project-alb-sg Description: Cho phep public traffic vao ALB VPC: Chọn VPC project-vpc. Thông tin cơ bản của ALB SG Bước 2: Thiết lập Inbound Rules\nNhấn Add rule và cấu hình các quy tắc sau: Type Protocol Port range Source Description HTTP TCP 80 Anywhere-IPv4 Cho phép người dùng truy cập qua HTTP. HTTPS TCP 443 Anywhere-IPv4 Cho phép người dùng truy cập qua HTTPS. Cấu hình Inbound Rules cho ALB SG Bước 3: Thiết lập Outbound Rules (Luồng truy cập ra) ALB cần gửi traffic đến backend trên port 3000. Mặc định, Outbound Rules cho phép tất cả traffic đi ra, nhưng để bảo mật tốt hơn, chúng ta nên giới hạn lại. Chọn tab Outbound rules -\u0026gt; Edit outbound rules. Xóa rule mặc định và Add rule mới: Type Protocol Port range Destination Description Custom TCP TCP 3000 Custom -\u0026gt; project-backend-sg Cho phép ALB gửi traffic tới các máy chủ backend. Cấu hình Outbound Rules cho ALB SG Bước 4: Nhấn Save rules, sau đó nhấn Create security group. Sau khi hoàn thành, bạn sẽ có 3 Security Group sẵn sàng để gán cho các tài nguyên tương ứng.\n"
},
{
	"uri": "http://localhost:1313/vi/4-cleanup/",
	"title": "Dọn dẹp tài nguyên",
	"tags": [],
	"description": "",
	"content": "\rCỰC KỲ QUAN TRỌNG: Đây là bước bắt buộc sau khi bạn hoàn thành workshop. Việc không dọn dẹp tài nguyên sẽ khiến tài khoản AWS của bạn tiếp tục phát sinh chi phí, đặc biệt là với các dịch vụ như NAT Gateway, Application Load Balancer và EC2.\nĐể đảm bảo không bỏ sót, chúng ta phải xóa các tài nguyên theo thứ tự ngược lại với lúc tạo ra chúng.\n🔒 Các bước thực hiện\n1. Xóa CloudFront Distributions Bạn cần xóa cả 2 distribution đã tạo cho Frontend (S3) và Backend (ALB).\nTruy cập dịch vụ CloudFront. Chọn một distribution, nhấn Disable và xác nhận. Sau khi distribution đã được disable, chọn lại nó và nhấn Delete. Lặp lại quá trình cho distribution còn lại. 2. Xóa Auto Scaling Group Thao tác này sẽ tự động xóa luôn EC2 instance do ASG quản lý.\nTruy cập dịch vụ EC2 -\u0026gt; Auto Scaling Groups. Chọn project-backend-asg và nhấn Delete. Nhập delete để xác nhận và hoàn tất. 3. Xóa Application Load Balancer Truy cập EC2 -\u0026gt; Load Balancers. Chọn project-backend-alb, vào Actions và chọn Delete load balancer. Nhập confirm để xác nhận. 4. Xóa Target Group Truy cập EC2 -\u0026gt; Target Groups. Chọn project-backend-target-group, vào Actions và chọn Delete. 5. Chấm dứt (Terminate) các EC2 Instance còn lại Cần xóa thủ công các instance không thuộc ASG.\nTruy cập EC2 -\u0026gt; Instances. Chọn các instance project-bastion-host-ec2 và project-backend-ec2 (nếu nó chưa bị ASG xóa). Chọn Instance state -\u0026gt; Terminate instance. 6. Xóa Launch Template Truy cập EC2 -\u0026gt; Launch Templates. Chọn project-backend-lauch-template, vào Actions và chọn Delete template. 7. Xóa AMI và Snapshot liên quan Bước 1: Hủy đăng ký AMI Truy cập EC2 -\u0026gt; AMIs. Chọn project-backend-ec2-ami, vào Actions và chọn Deregister AMI. Bước 2: Xóa Snapshot Truy cập EC2 -\u0026gt; Snapshots. Tìm Snapshot được tạo bởi AMI (thường có mô tả chứa ID của AMI), chọn nó và nhấn Actions -\u0026gt; Delete snapshot. 8. Xóa S3 Bucket Bạn phải xóa hết các đối tượng bên trong bucket trước.\nTruy cập dịch vụ S3. Vào bucket project-frontend-030925. Chọn tất cả các file và nhấn Delete. Sau khi bucket đã trống, quay ra ngoài, chọn bucket và nhấn Delete. 9. Xóa VPC Đây là bước cuối cùng, sẽ xóa VPC và các tài nguyên con như Subnet, Route Table, Internet Gateway, và quan trọng nhất là NAT Gateway.\nTruy cập dịch vụ VPC. Chọn Your VPCs, chọn project-vpc. Nhấn Actions -\u0026gt; Delete VPC. Một cửa sổ sẽ hiện ra liệt kê các tài nguyên sẽ bị xóa. Nhập delete và xác nhận. 10. Xóa Key Pair Truy cập EC2 -\u0026gt; Key Pairs. Chọn project-keypair, vào Actions và chọn Delete. "
},
{
	"uri": "http://localhost:1313/vi/2-prerequiste/2.4-createec2/",
	"title": "Tạo EC2 Instance cho Bastion Host và Backend",
	"tags": [],
	"description": "",
	"content": "Khởi tạo EC2 Instances ℹ️ Mục tiêu\nKhởi tạo hai máy chủ ảo (EC2 Instance) riêng biệt: Bastion Host: Đặt trong Public Subnet để làm \u0026ldquo;trạm trung chuyển\u0026rdquo;, giúp chúng ta kết nối an toàn vào các tài nguyên trong Private Subnet. Backend Instance: Đặt trong Private Subnet để chạy ứng dụng, được bảo vệ khỏi truy cập trực tiếp từ Internet. 🔒 Các bước thực hiện\nĐầu tiên, chúng ta sẽ khởi tạo EC2 Instance cho Bastion Host.\n1. Tạo EC2 Instance cho Bastion Host (project-bastion-host-ec2) Bước 1: Bắt đầu khởi tạo Instance\nTrong giao diện AWS Management Console, tìm và chọn dịch vụ EC2. Từ EC2 Dashboard, nhấn vào Launch instance. Bắt đầu Launch Instance Bước 2: Đặt tên và chọn AMI\nName: project-bastion-host-ec2 Application and OS Images (Amazon Machine Image): Chọn Amazon Linux. Đặt tên và chọn Amazon Machine Image Bước 3: Chọn loại Instance\nInstance type: Chọn t2.micro (thuộc Free Tier). Bước 4: Tạo Key Pair để truy cập\nĐây là bước quan trọng để có thể SSH vào instance. Nhấn vào Create new key pair. Key pair name: project-keypair Key pair type: RSA Private key file format: .pem Nhấn Create key pair và trình duyệt sẽ tự động tải về file .pem. **QUAN TRỌNG:** Hãy lưu trữ file `.pem` này ở một nơi an toàn. Bạn sẽ không thể tải lại nó lần thứ hai. Nếu làm mất, bạn sẽ không thể truy cập vào EC2 instance.\rTạo Key Pair mới Bước 5: Cấu hình Network Settings\nNhấn vào Edit ở mục Network settings. VPC: Chọn project-vpc đã tạo. Subnet: Chọn một trong hai Public Subnet (ví dụ: ...public-subnet-ap-southeast-1a). Auto-assign public IP: Enable. Firewall (security groups): Chọn Select existing security group và chọn project-bastion-host-sg. Cấu hình mạng cho Bastion Host Bước 6: Khởi tạo Instance\nKiểm tra lại các thông tin trong bảng Summary. Nhấn Launch instance. 2. Tạo EC2 Instance cho Backend (project-backend-ec2) Tiếp theo, chúng ta lặp lại quy trình để tạo instance cho Backend, với một vài thay đổi quan trọng trong phần Network Settings.\nBước 1: Bắt đầu khởi tạo Instance\nTừ EC2 Dashboard, nhấn Launch instance một lần nữa. Bước 2: Đặt tên và chọn AMI\nName: project-backend-ec2 AMI: Chọn Amazon Linux. Bước 3: Chọn loại Instance\nInstance type: Chọn t2.micro. Bước 4: Chọn Key Pair đã có\nTrong mục Key pair (login), chọn project-keypair đã tạo ở phần trước. Chọn Key Pair đã tồn tại Bước 5: Cấu hình Network Settings\nNhấn vào Edit ở mục Network settings. VPC: Chọn project-vpc. Subnet: Chọn một trong hai Private Subnet (ví dụ: ...private-subnet-ap-southeast-1b). Auto-assign public IP: Disable. Đây là điểm khác biệt quan trọng để bảo vệ máy chủ backend. Firewall (security groups): Chọn Select existing security group và chọn project-backend-sg. Cấu hình mạng cho Backend Instance Bước 6: Khởi tạo Instance\nKiểm tra lại thông tin và nhấn Launch instance. Sau khi hoàn tất, bạn có thể nhấn View all instances để xem cả hai máy chủ vừa tạo đang ở trạng thái Running.\nDanh sách các EC2 Instance đã tạo "
},
{
	"uri": "http://localhost:1313/vi/5-conclusion/",
	"title": "Kết Luận và Hướng phát triển",
	"tags": [],
	"description": "",
	"content": "Chúc mừng bạn đã hoàn thành workshop!\nBạn đã thành công xây dựng một kiến trúc ứng dụng web hiện đại, có khả năng co giãn và tính sẵn sàng cao trên nền tảng AWS. Đây không chỉ là một bài thực hành đơn thuần mà là một nền tảng vô cùng vững chắc, mô phỏng lại cách các hệ thống thực tế được xây dựng trên đám mây.\nThay vì chỉ nhìn lại những gì đã làm, chúng ta hãy cùng xem xét cách để làm cho hệ thống này trở nên tốt hơn, tự động hơn và mạnh mẽ hơn nữa.\nNâng cấp và Mở rộng Dự án Kiến trúc hiện tại là một khởi đầu tuyệt vời. Dưới đây là những hướng cải tiến tiềm năng mà bạn có thể khám phá để nâng cao kỹ năng của mình:\n1. Tự động hóa Triển khai với CI/CD Pipeline Vấn đề: Hiện tại, quy trình cập nhật code đang được làm thủ công (SSH vào server, git pull, npm restart). Quy trình này tốn thời gian, dễ gây lỗi và không phù hợp cho môi trường chuyên nghiệp. Giải pháp: Xây dựng một đường ống CI/CD (Continuous Integration/Continuous Deployment) với các dịch vụ như AWS CodePipeline, AWS CodeBuild và AWS CodeDeploy. Với CI/CD, mỗi khi bạn đẩy code mới lên GitHub, hệ thống sẽ tự động build, kiểm thử và triển khai phiên bản mới lên các máy chủ EC2 mà không cần bất kỳ sự can thiệp thủ công nào. 2. Quản lý Hạ tầng bằng Mã lệnh (Infrastructure as Code - IaC) Vấn đề: Việc thiết lập toàn bộ hạ tầng bằng tay qua AWS Console (ClickOps) rất khó để tái tạo một cách chính xác và không có khả năng quản lý phiên bản. Giải pháp: Học cách sử dụng các công cụ IaC như AWS CloudFormation hoặc Terraform. Bạn có thể định nghĩa toàn bộ kiến trúc (VPC, EC2, ALB, S3, v.v.) trong các tệp mã lệnh. Điều này cho phép bạn tạo lại, cập nhật hoặc xóa toàn bộ môi trường chỉ bằng một vài dòng lệnh, đảm bảo tính nhất quán và tự động hóa. 3. Tích hợp Cơ sở dữ liệu được quản lý (Managed Database) Vấn đề: Ứng dụng của chúng ta hiện chưa có cơ sở dữ liệu để lưu trữ dữ liệu lâu dài. Giải pháp: Thay vì tự cài đặt database trên EC2 (việc này đòi hỏi nhiều công sức quản trị), hãy sử dụng các dịch vụ cơ sở dữ liệu được quản lý của AWS. Amazon RDS (Relational Database Service): Dành cho các cơ sở dữ liệu quan hệ như MySQL, PostgreSQL. Amazon DynamoDB: Dành cho cơ sở dữ liệu NoSQL, phù hợp với các ứng dụng cần hiệu năng cao và độ trễ thấp. 4. Sử dụng Tên miền Riêng với Amazon Route 53 Vấn đề: Người dùng đang truy cập ứng dụng qua các tên miền mặc định, dài và khó nhớ của CloudFront. Giải pháp: Sử dụng Amazon Route 53, dịch vụ DNS của AWS, để đăng ký một tên miền riêng (ví dụ: my-weather-app.com) và trỏ nó đến các CloudFront distribution của bạn. 5. Giám sát, Ghi log và Cảnh báo với Amazon CloudWatch Vấn đề: Làm sao để biết ứng dụng đang hoạt động tốt hay đang gặp lỗi? Khi nào cần Auto Scaling kích hoạt? Giải pháp: Tích hợp sâu hơn với Amazon CloudWatch. Bạn có thể: CloudWatch Logs: Thu thập log từ các ứng dụng trên EC2 để gỡ lỗi. CloudWatch Metrics: Theo dõi các chỉ số hiệu năng quan trọng như CPU Utilization, Request Count. CloudWatch Alarms: Thiết lập các cảnh báo tự động gửi email hoặc tin nhắn cho bạn khi có sự cố xảy ra (ví dụ: CPU quá tải, website không thể truy cập). 6. Tăng cường Bảo mật với AWS WAF Vấn đề: Ứng dụng có thể bị tấn công bởi các lỗ hổng web phổ biến như SQL injection hoặc cross-site scripting (XSS). Giải pháp: Tích hợp AWS WAF (Web Application Firewall) với CloudFront hoặc Application Load Balancer. WAF giúp bảo vệ ứng dụng của bạn bằng cách lọc và chặn các lưu lượng truy cập độc hại. Hành trình của bạn với AWS chỉ mới bắt đầu. Với nền tảng vững chắc từ workshop này, bạn đã sẵn sàng để khám phá và chinh phục những dịch vụ và thử thách phức tạp hơn.\nChúc bạn thành công!\n"
},
{
	"uri": "http://localhost:1313/vi/2-prerequiste/2.5-createami/",
	"title": "Tạo Amazon Machine Image (AMI)",
	"tags": [],
	"description": "",
	"content": "Khởi tạo AMI từ Backend Instance ℹ️ Mục tiêu\nAmazon Machine Image (AMI) là một bản \u0026ldquo;snapshot\u0026rdquo; hay bản sao lưu hoàn chỉnh của một EC2 instance, bao gồm hệ điều hành, cấu hình và dữ liệu. Mục đích chính của việc tạo AMI trong workshop này là để có một \u0026ldquo;khuôn mẫu\u0026rdquo; chuẩn cho máy chủ backend. Khuôn mẫu này sẽ được Launch Template và Auto Scaling Group sử dụng để tự động tạo ra các bản sao y hệt của máy chủ backend khi cần mở rộng quy mô. 🔒 Các bước thực hiện\n1. Chọn EC2 Instance nguồn Trong EC2 Dashboard, điều hướng đến Instances. Từ danh sách, chọn instance project-backend-ec2. Chọn EC2 Instance Backend 2. Bắt đầu quá trình tạo Image Sau khi đã chọn instance, nhấn vào menu Actions. Chọn Image and templates. Chọn Create image. Bắt đầu tạo Image từ menu Actions 3. Cấu hình thông tin cho AMI Tại trang Create image, điền các thông tin sau: Image name: project-backend-ec2-ami Image description: project-backend-ec2-ami Các tùy chọn khác có thể để mặc định. Điền thông tin cấu hình cho AMI 4. Hoàn tất và kiểm tra trạng thái Cuộn xuống dưới và nhấn Create image.\nBạn sẽ nhận được thông báo rằng quá trình tạo AMI đã bắt đầu.\nĐể theo dõi tiến trình:\nỞ menu bên trái, dưới mục Images, chọn AMIs. Bạn sẽ thấy AMI project-backend-ec2-ami đang ở trạng thái pending. Quá trình này có thể mất vài phút. Hãy đợi cho đến khi Status chuyển sang Available. Kiểm tra trạng thái AMI đã hoàn tất "
},
{
	"uri": "http://localhost:1313/vi/2-prerequiste/2.6-createlaunchtemplate/",
	"title": "Tạo Launch Template cho Auto Scaling",
	"tags": [],
	"description": "",
	"content": "Khởi tạo Launch Template ℹ️ Mục tiêu\nLaunch Template hoạt động như một \u0026ldquo;bản thiết kế\u0026rdquo; chi tiết cho việc khởi tạo EC2 instance. Nó lưu trữ tất cả các thông số cấu hình cần thiết như AMI, loại instance, key pair, security group, và các thiết lập mạng. Mục đích của chúng ta là tạo một Launch Template sử dụng AMI của máy chủ backend (project-backend-ec2-ami) đã tạo ở bước trước. Auto Scaling Group sẽ dựa vào bản thiết kế này để tự động khởi chạy các instance mới một cách đồng nhất và chính xác. 🔒 Các bước thực hiện\n1. Truy cập Launch Templates Từ EC2 Dashboard, ở menu bên trái, cuộn xuống và chọn Launch Templates. Nhấn vào Create launch template. Bắt đầu tạo Launch Template 2. Cấu hình thông tin cơ bản Launch template name: project-backend-lauch-template Template version description: Template for weather project backend servers Điền thông tin cơ bản cho Launch Template 3. Chọn AMI (Amazon Machine Image) Trong mục Application and OS Images (Amazon Machine Image), chọn tab My AMIs. Chọn Owned by me và bạn sẽ thấy AMI đã tạo ở bước trước. Hãy chọn project-backend-ec2-ami. Chọn AMI đã tạo 4. Chọn Instance Type và Key Pair Instance type: Chọn t2.micro. Key pair (login): Chọn project-keypair từ danh sách thả xuống. Chọn loại Instance và Key Pair 5. Cấu hình Network Settings Trong mục Network settings, chúng ta sẽ chỉ định Security Group. Security groups: Chọn Select existing security group. Trong danh sách Common security groups, chọn project-backend-sg. Cấu hình Security Group 6. Hoàn tất và xem lại Launch Template Kiểm tra lại tất cả các thông tin đã cấu hình. Cuộn xuống dưới và nhấn Create launch template. Sau khi tạo thành công, nhấn View launch templates để xem lại template bạn vừa tạo trong danh sách. Tạo Launch Template thành công Xem Launch Template trong danh sách "
},
{
	"uri": "http://localhost:1313/vi/2-prerequiste/2.7-createtargetgroup/",
	"title": "Tạo Target Group",
	"tags": [],
	"description": "",
	"content": "Khởi tạo Target Group ℹ️ Mục tiêu\nTarget Group (Nhóm mục tiêu) được sử dụng để gom nhóm các tài nguyên (trong trường hợp này là các EC2 instance) mà Application Load Balancer (ALB) sẽ chuyển hướng lưu lượng truy cập đến. ALB cũng sử dụng Target Group để thực hiện kiểm tra sức khỏe (Health Check), đảm bảo rằng nó chỉ gửi yêu cầu đến các instance đang hoạt động bình thường. Chúng ta sẽ tạo một Target Group để quản lý các máy chủ backend của dự án. 🔒 Các bước thực hiện\n1. Truy cập Target Groups Từ EC2 Dashboard, ở menu bên trái, cuộn xuống mục Load Balancing và chọn Target Groups. Nhấn vào Create target group. Bắt đầu tạo Target Group 2. Chọn loại Target Trong bước Choose a target type, chọn Instances vì chúng ta muốn Load Balancer chuyển hướng traffic đến các EC2 instance. Nhấn Next. Chọn Target Type là Instances 3. Cấu hình chi tiết cho Target Group Target group name: project-backend-target-group Protocol - Port: Chọn HTTP và nhập 3000. Đây là port mà ứng dụng Node.js backend của chúng ta đang lắng nghe. VPC: Chọn project-vpc. Health checks (Kiểm tra sức khỏe): Health check protocol: HTTP Health check path: /health. Đây là đường dẫn mà Load Balancer sẽ truy cập để kiểm tra xem máy chủ có đang hoạt động tốt không (liên quan đến code backend). Điền thông tin cấu hình cho Target Group 4. Đăng ký Targets ban đầu Ở bước này, chúng ta sẽ đăng ký instance backend đã tạo thủ công vào Target Group. Trong bảng Available instances, chọn project-backend-ec2. Nhấn vào Include as pending below. Thao tác này sẽ đưa instance vào danh sách chờ để được đăng ký vào group. Việc đăng ký ít nhất một instance ban đầu giúp chúng ta kiểm tra xem Load Balancer và Target Group có hoạt động chính xác hay không sau khi cấu hình. Các instance sau này sẽ được Auto Scaling Group tự động đăng ký.\nĐăng ký instance vào Target Group 5. Hoàn tất và xem lại Cuộn xuống dưới và nhấn Create target group. Sau khi tạo thành công, bạn sẽ được đưa đến trang chi tiết của Target Group. Ban đầu, trạng thái health status của instance có thể là unhealthy hoặc initial. Hãy đợi một vài phút để Load Balancer thực hiện health check, trạng thái sẽ chuyển sang healthy. Tạo Target Group thành công "
},
{
	"uri": "http://localhost:1313/vi/2-prerequiste/2.8-createalb/",
	"title": "Tạo Application Load Balancer (ALB)",
	"tags": [],
	"description": "",
	"content": "Khởi tạo Application Load Balancer (ALB) ℹ️ Mục tiêu\nApplication Load Balancer (ALB) đóng vai trò là điểm tiếp nhận và phân phối lưu lượng truy cập từ người dùng đến các máy chủ backend. Bằng cách đặt ALB trong các Public Subnet trên nhiều Availability Zone (AZ), chúng ta đảm bảo ứng dụng có tính sẵn sàng cao (High Availability). Nếu một AZ gặp sự cố, ALB sẽ tự động chuyển hướng traffic đến các máy chủ ở AZ còn lại. ALB sẽ lắng nghe các yêu cầu đến và chuyển tiếp chúng đến Target Group (project-backend-target-group) mà chúng ta đã tạo ở bước trước. 🔒 Các bước thực hiện\n1. Bắt đầu tạo Load Balancer Từ EC2 Dashboard, ở menu bên trái, cuộn xuống mục Load Balancing và chọn Load Balancers. Nhấn vào Create load balancer. Bắt đầu tạo Load Balancer 2. Chọn loại Load Balancer Có nhiều loại Load Balancer. Vì ứng dụng của chúng ta hoạt động trên lớp ứng dụng (HTTP/HTTPS), hãy chọn Application Load Balancer bằng cách nhấn Create. Chọn Application Load Balancer 3. Cấu hình thông tin cơ bản Load balancer name: project-backend-alb Scheme: Internet-facing (Vì ALB này sẽ nhận traffic trực tiếp từ Internet). IP address type: IPv4 Điền thông tin cấu hình cơ bản cho ALB 4. Cấu hình Network Mapping Đây là bước quan trọng để đảm bảo ALB có thể truy cập được từ Internet. VPC: Chọn project-vpc. Mappings: Chọn cả hai Availability Zone mà chúng ta đang sử dụng. Với mỗi AZ, hãy chọn Public Subnet tương ứng. Chọn VPC và các Public Subnet 5. Cấu hình Security Group Giữ Security Group default đang được chọn. Trong danh sách thả xuống, chọn Security Group đã tạo riêng cho ALB: project-alb-sg. Chọn Security Group cho ALB 6. Cấu hình Listeners and Routing Đây là nơi chúng ta định nghĩa cách ALB xử lý các yêu cầu đến. Listener: Giữ nguyên HTTP và Port 80. Default action: Trong danh sách thả xuống, chọn project-backend-target-group đã tạo ở bước trước. Thao tác này sẽ ra lệnh cho ALB chuyển tiếp tất cả traffic từ port 80 đến Target Group này. Cấu hình Listener và chuyển tiếp đến Target Group 7. Hoàn tất, kiểm tra trạng thái và truy cập thử Kiểm tra lại các thông tin trong phần Summary và nhấn Create load balancer. Sau khi tạo thành công, nhấn View load balancer. Lưu ý: Quá trình khởi tạo Load Balancer sẽ mất khoảng 5-10 phút. Trạng thái của nó sẽ chuyển từ provisioning sang active. Hãy kiên nhẫn chờ đợi.\nChờ ALB chuyển sang trạng thái Active Khi ALB đã active, chọn vào nó và sao chép DNS name trong tab Details. Sao chép DNS name của ALB Sau khi bạn kết nối với Backend và đăng tải dự án lên thì sẽ thấy được thấy được kết quả của bước sau Dán DNS name này vào trình duyệt. Nếu mọi thứ được cấu hình chính xác, bạn sẽ thấy thông báo: Backend is running! Kiểm tra thành công qua DNS của ALB "
},
{
	"uri": "http://localhost:1313/vi/2-prerequiste/2.9-createasg/",
	"title": "Tạo Auto Scaling Group",
	"tags": [],
	"description": "",
	"content": "Khởi tạo Auto Scaling Group (ASG) ℹ️ Mục tiêu\nAuto Scaling Group (ASG) là trái tim của một kiến trúc linh hoạt và có khả năng co giãn trên AWS. Nhiệm vụ của nó là tự động điều chỉnh số lượng EC2 instance đang chạy để đáp ứng nhu cầu lưu lượng truy cập hiện tại. Khi traffic tăng, ASG sẽ tự động thêm instance mới (Scale Out). Khi traffic giảm, nó sẽ tự động loại bỏ các instance không cần thiết (Scale In) để tiết kiệm chi phí. Chúng ta sẽ cấu hình một ASG sử dụng Launch Template đã tạo để biết cách tạo instance, và gắn nó với Load Balancer để biết khi nào cần tạo. 🔒 Các bước thực hiện\n1. Bắt đầu tạo Auto Scaling Group Từ EC2 Dashboard, ở menu bên trái, cuộn xuống dưới cùng và chọn Auto Scaling Groups. Nhấn vào Create Auto Scaling group. Bắt đầu tạo Auto Scaling Group 2. Đặt tên và chọn Launch Template Auto Scaling group name: project-backend-asg Launch template: Chọn project-backend-lauch-template từ danh sách. Sau khi chọn, nhấn Next. Chọn tên và Launch Template 3. Cấu hình Network VPC: Chọn project-vpc. Availability Zones and subnets: Chọn cả hai Private Subnet mà chúng ta có. ASG sẽ sử dụng các subnet này để khởi chạy instance mới, đảm bảo chúng được bảo vệ và có tính sẵn sàng cao. Nhấn Next. Cấu hình VPC và các Private Subnet 4. Tích hợp với Load Balancer Chọn Attach to an existing load balancer. Chọn Choose from your load balancer target groups. Trong danh sách thả xuống, chọn project-backend-target-group. Nhấn Next. Gắn ASG vào Target Group đã có 5. Cấu hình quy mô và chính sách Scaling Group size (Quy mô nhóm):\nDesired capacity: 1 (Số lượng instance mong muốn khi ASG được tạo). Minimum capacity: 1 (Số lượng instance tối thiểu phải có). Maximum capacity: 2 (Số lượng instance tối đa được phép tạo). Scaling policies (Chính sách mở rộng):\nChọn Target tracking scaling policy. Scaling policy name: Target Tracking Policy Metric type: Application Load Balancer request count per target. Target value: 30. (Nghĩa là: nếu mỗi instance phải xử lý trung bình hơn 30 yêu cầu/phút, hãy thêm instance mới). Nhấn Next.\nCấu hình quy mô và chính sách Scaling 6. Bỏ qua các bước tùy chọn Bạn sẽ được chuyển đến các trang Add notifications và Add tags. Chúng ta không cần cấu hình chúng trong workshop này. Nhấn Next ở cả hai trang để bỏ qua. 7. Review và Hoàn tất Kiểm tra lại tất cả các thông tin đã cấu hình trên trang Review. Cuộn xuống dưới và nhấn Create Auto Scaling group. Xem lại và tạo Auto Scaling Group 8. Kiểm tra trạng thái Sau khi tạo xong, ASG sẽ xuất hiện trong danh sách. Chọn vào project-backend-asg và chuyển sang tab Instance management. Bạn sẽ thấy ASG đang trong quá trình khởi tạo một instance mới để đạt được Desired capacity là 1. Hãy đợi cho đến khi Lifecycle của instance là InService. Điều này cho thấy instance đã sẵn sàng hoạt động và đã được đăng ký vào Target Group. Kiểm tra instance do ASG quản lý "
},
{
	"uri": "http://localhost:1313/vi/2-prerequiste/2.10-createcloudfrontbe/",
	"title": "Tạo CloudFront cho Backend (ALB)",
	"tags": [],
	"description": "",
	"content": "Tạo Distribution CloudFront cho Backend ℹ️ Mục tiêu\nAmazon CloudFront là một dịch vụ mạng phân phối nội dung (CDN) giúp tăng tốc độ phân phối nội dung web (như API, video, dữ liệu) đến người dùng cuối với độ trễ thấp và tốc độ truyền tải cao. Trong kiến trúc này, CloudFront sẽ đóng vai trò là \u0026ldquo;cổng vào\u0026rdquo; công khai cho backend API của chúng ta, thay vì truy cập trực tiếp vào ALB. Lợi ích chính: HTTPS Termination: CloudFront sẽ xử lý kết nối HTTPS từ người dùng. Sau đó, nó sẽ giao tiếp với ALB qua HTTP trong mạng nội bộ của AWS. Điều này giúp đơn giản hóa việc quản lý SSL/TLS, vì chúng ta không cần cấu hình chứng chỉ trên ALB hoặc EC2 instance. Tăng hiệu suất và giảm độ trễ: CloudFront đưa API của bạn đến gần người dùng hơn thông qua các điểm hiện diện (Edge Location) trên toàn cầu. Tăng cường bảo mật: Cung cấp một lớp bảo vệ bổ sung, che giấu ALB và có thể tích hợp với AWS WAF (Web Application Firewall). 🔒 Các bước thực hiện\n1. Bắt đầu tạo Distribution Từ AWS Management Console, tìm kiếm và chọn dịch vụ CloudFront. Nhấn vào Create a CloudFront distribution. Bắt đầu tạo CloudFront Distribution 2. Cấu hình Origin (Nguồn gốc) Origin domain: Nhấn vào ô và chọn DNS name của Application Load Balancer project-backend-alb từ danh sách thả xuống. Protocol: Chọn HTTP only. HTTP port: Để mặc định là 80. Cấu hình Origin là Application Load Balancer 3. Cấu hình Default Cache Behavior Đây là phần cấu hình quan trọng nhất để đảm bảo API hoạt động đúng cách. Viewer protocol policy: Chọn Redirect HTTP to HTTPS để tự động chuyển hướng người dùng sang kết nối an toàn. Allowed HTTP methods: Chọn GET, HEAD, OPTIONS, PUT, POST, PATCH, DELETE để cho phép tất cả các phương thức API. Cache policy: Chọn CachingDisabled. Điều này rất quan trọng vì chúng ta không muốn CloudFront lưu cache các phản hồi của API (vốn có tính động). Origin request policy - optional: Chọn AllViewer. Chính sách này sẽ chuyển tiếp tất cả thông tin từ người dùng (headers, query strings, cookies) đến ALB, đảm bảo backend nhận được đầy đủ dữ liệu cần thiết để xử lý yêu cầu. Cấu hình Cache Behavior cho API 4. Cấu hình các thiết lập khác Web Application Firewall (WAF): Chọn Do not enable security protections cho mục đích của workshop này. 5. Hoàn tất và kiểm tra Cuộn xuống cuối trang và nhấn Create distribution. Quá trình triển khai một distribution mới ra toàn bộ mạng lưới của CloudFront có thể mất từ 5 đến 15 phút. Bạn sẽ thấy trạng thái Deploying. Chờ CloudFront hoàn tất triển khai Khi trạng thái chuyển sang Enabled (hiển thị ngày Last modified), hãy sao chép Distribution domain name (ví dụ: d12345abcdef.cloudfront.net). Sao chép Domain Name của Distribution Dán domain name này vào trình duyệt. Kết quả trả về phải giống hệt như khi bạn truy cập qua DNS của ALB: Backend is running!. Kiểm tra thành công qua CloudFront "
},
{
	"uri": "http://localhost:1313/vi/2-prerequiste/2.11-creates3/",
	"title": "Tạo S3 Bucket và cấu hình Static Website Hosting",
	"tags": [],
	"description": "",
	"content": "Tạo S3 Bucket để lưu trữ Frontend ℹ️ Mục tiêu\nAmazon S3 (Simple Storage Service) là một dịch vụ lưu trữ đối tượng có khả năng mở rộng, độ bền cao và chi phí thấp. Chúng ta sẽ sử dụng S3 để lưu trữ toàn bộ các tệp tĩnh của ứng dụng frontend (HTML, CSS, JavaScript, hình ảnh). Sau đó, chúng ta sẽ cấu hình bucket này để hoạt động như một máy chủ web tĩnh (Static Website Hosting), cho phép truy cập trực tiếp vào trang web qua một URL của S3. 🔒 Các bước thực hiện\n1. Bắt đầu tạo S3 Bucket Trong AWS Management Console, tìm kiếm và chọn dịch vụ S3. Nhấn vào Create bucket. Bắt đầu tạo S3 Bucket 2. Cấu hình thông tin cơ bản Bucket name: project-frontend-030925 Tên S3 bucket là duy nhất trên toàn cầu. Nếu tên này đã tồn tại, bạn cần thêm các ký tự hoặc số để làm cho nó trở nên độc nhất (ví dụ: `project-frontend-030925-yourname`).\rAWS Region: Chọn Region bạn đang làm việc.\nObject Ownership: Chọn ACLs enabled. Chúng ta chọn tùy chọn này để có thể cấp quyền công khai cho từng tệp riêng lẻ bằng Access Control Lists (ACL), một phương pháp cần thiết cho bước cấu hình tiếp theo.\rCấu hình tên, Region và bật ACLs 3. Cấu hình Public Access Settings Tích ở ô Block all public access. Bước này cho phép chúng ta làm cho các đối tượng trong bucket có thể truy cập công khai. Trong các bước tiếp theo, CloudFront sẽ được cấu hình để bảo vệ bucket này một cách an toàn hơn.\nBật Block Public Access Bucket Versioning: Chọn Enable. Cuộn xuống và nhấn Create bucket. 4. Tải file Frontend lên Bucket Sau khi tạo bucket thành công, hãy vào bucket project-frontend-030925. Nhấn Upload và tải toàn bộ các tệp và thư mục của dự án frontend của bạn lên. Tải các tệp Frontend lên S3 5. Cấu hình Static Website Hosting Trong bucket, chuyển sang tab Properties. Cuộn xuống dưới cùng đến mục Static website hosting và nhấn Edit. Chọn Enable. Index document: index.html Nhấn Save changes. Bật và cấu hình Static Website Hosting "
},
{
	"uri": "http://localhost:1313/vi/2-prerequiste/2.12-createcloudfrontfe/",
	"title": "Tạo CloudFront cho Frontend (S3)",
	"tags": [],
	"description": "",
	"content": "Khởi tạo CloudFront Distribution cho Frontend (S3) ℹ️ Mục tiêu\nTạo một CloudFront Distribution thứ hai, lần này dành riêng cho việc phân phối các tệp tĩnh của frontend từ S3 bucket. Tăng tốc độ tải trang: CloudFront sẽ lưu trữ (cache) các tệp frontend tại các điểm biên (Edge Location) trên toàn cầu, giúp người dùng ở khắp nơi truy cập trang web với độ trễ thấp nhất. Tăng cường bảo mật: Chúng ta sẽ cấu hình Origin Access Identity (OAI), một tính năng đặc biệt của CloudFront. OAI sẽ khóa S3 bucket lại, chỉ cho phép một \u0026ldquo;người dùng\u0026rdquo; duy nhất là CloudFront được phép đọc các tệp. Người dùng cuối sẽ không thể truy cập trực tiếp vào S3 bucket nữa, đảm bảo mọi truy cập đều phải đi qua CloudFront. 🔒 Các bước thực hiện\n1. Bắt đầu tạo Distribution Trong AWS Management Console, quay trở lại dịch vụ CloudFront. Nhấn vào Create distribution. Bắt đầu tạo CloudFront Distribution mới 2. Cấu hình Origin (Nguồn gốc) Origin domain: Nhấn vào ô này và chọn S3 bucket của bạn từ danh sách, ví dụ: project-frontend-030925.s3.ap-southeast-1.amazonaws.com. Origin access: Đây là bước cấu hình bảo mật quan trọng nhất. Chọn Legacy access identities. Origin access identity: Nhấn vào Create new OAI. Để tên mặc định và nhấn Create. Bucket policy: Chọn Yes, update the bucket policy. Thao tác này sẽ tự động thêm một chính sách vào S3 bucket của bạn, cho phép OAI vừa tạo có quyền đọc các đối tượng. Cấu hình Origin là S3 Bucket và tạo OAI 3. Cấu hình các mục còn lại Web Application Firewall (WAF): Chọn Do not enable security protections. Settings - Default root object: Gõ index.html. Đây là một thiết lập bắt buộc. Nó cho CloudFront biết phải trả về tệp nào khi người dùng truy cập vào tên miền gốc (ví dụ: `https://d...cloudfront.net/`) mà không chỉ định một tệp cụ thể.\rThiết lập Default Root Object 4. Hoàn tất và kiểm tra Cuộn xuống dưới cùng và nhấn Create distribution. Tương tự như trước, quá trình triển khai sẽ mất vài phút. Hãy chờ cho đến khi trạng thái không còn là Deploying. Sao chép giá trị Distribution domain name. Sao chép Domain Name của Distribution Frontend Dán domain name này vào trình duyệt. Bạn sẽ thấy ứng dụng frontend của mình được tải lên thành công. "
},
{
	"uri": "http://localhost:1313/vi/categories/",
	"title": "Categories",
	"tags": [],
	"description": "",
	"content": ""
},
{
	"uri": "http://localhost:1313/vi/tags/",
	"title": "Tags",
	"tags": [],
	"description": "",
	"content": ""
}]